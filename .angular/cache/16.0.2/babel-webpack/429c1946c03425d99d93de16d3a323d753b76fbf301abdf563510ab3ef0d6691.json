{"ast":null,"code":"import _asyncToGenerator from \"C:/wamp/www/rosario-snack/cliente/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { catchError, map } from 'rxjs/operators';\nimport { firstValueFrom } from 'rxjs';\nimport { GLOBAL } from './global';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Decorador\nclass UsuarioServices {\n  // constructor( private _httpClient: HttpClient ){\n  constructor(_http) {\n    this._http = _http;\n    this.url = GLOBAL.url;\n  }\n  // *** LOGUEAR USUARIO ***\n  signUp(usuario_a_loguear, gethash = false) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        if (gethash) {\n          usuario_a_loguear.gethash = gethash;\n        }\n        let jsonUser = JSON.stringify(usuario_a_loguear);\n        // Como usamos Js en el servidor tambien, definimos asi el Content-Type\n        let headers = new HttpHeaders({\n          'Content-Type': 'application/json',\n          //'authorization': this.token,\n          'Authorization': 'Bearer clave_secreta_trabajo_final'\n        });\n        // Devolvemos la petición AJAX\n        var resp = yield firstValueFrom(_this._http.post(_this.url + 'loguear-usuario', jsonUser, {\n          headers: headers\n        }).pipe(map(response => {\n          return response;\n        }),\n        // Error arrojado desde el usuario.js. Clave incorrecta, usuario incorrecto, etc..\n        catchError(error => {\n          // Puedo definir si solo mando eso, o el status y mas info o solo el \"error\"\n          throw error.error.message;\n        })));\n        return resp;\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }\n  // async registroUsuario(usuario_a_registrar: UsuarioPersona){\n  //     var usuarioP = new Usuario('','','','','','ROLE_USER','', new Date, new Date, false); \n  //     let jsonUsuarioRegistro = JSON.stringify(usuarioP); \n  //     let params = jsonUsuarioRegistro;\n  //     // Como usamos Js en el servidor tambien, definimos asi el Content-Type\n  //     // let headers = new HttpHeaders({\n  //     //     'Content-Type':'application/json',\n  //     //     'autorizacion':'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2NDk2MGVkNWE4ZDA3OGY0NWY3YjAyNDAiLCJub21icmVfdXN1YXJpbyI6Ik1hbnVVc2VyIiwiZW1haWwiOiJtYW51cGVyZXpAZ21haWwuY29tIiwicm9sIjoiQ2xpZW50ZSIsImltYWdlbiI6Im51bGwiLCJpYXQiOjE2OTE1MzE2MDEsImV4cCI6MTY5NDEyMzYwMX0.i0fL37ACEC2I_oWrwPDGfXrHGK2eDCfnarXK17hAgmA',\n  //     //     'Authorization': 'Bearer clave_secreta_trabajo_final'\n  //     // });\n  //     const headers = new HttpHeaders({\n  //         'Content-Type': 'application/json' // 'application/x-www-form-urlencoded'\n  //     });\n  //     try {\n  //         // Devolvemos la petición AJAX\n  //         const resp = await this._http.post( this.url + 'guardar-persona', params, {headers: headers} )\n  //         .pipe(                \n  //             map(response => {\n  //                 debugger;\n  //                 console.log( {resp: response, message: \"Respuesta dentro del pipe.map...\"} );\n  //                 //return response;\n  //             }),\n  //             // Error arrojado desde el usuario.js. Clave incorrecta, usuario incorrecto, etc..\n  //             catchError(error => { \n  //                 debugger;\n  //                 console.log({error:error.error.message, message: \"No se encontró el usuario logueado\"});\n  //                 // Puedo definir si solo mando eso, o el status y mas info o solo el \"error\"\n  //                 throw error.error.message;\n  //             }));     \n  //         // var resp = await this._http.get( this.url + 'probando-controlador', { headers: headers })  \n  //         //     .pipe(\n  //         //         map(response => {\n  //         //             debugger;\n  //         //             console.log( {resp: response, message: \"Respuesta dentro del pipe.map...\"} );\n  //         //             return response;\n  //         //         }),\n  //         //         // Error arrojado desde el usuario.js. Clave incorrecta, usuario incorrecto, etc..\n  //         //         catchError(error => { \n  //         //             debugger;\n  //         //             console.log({error:error.error.message, message: \"No se encontró el usuario logueado\"});\n  //         //             // Puedo definir si solo mando eso, o el status y mas info o solo el \"error\"\n  //         //             throw error.error.message;\n  //         //         }));  \n  //         console.log({ message: \"No tira error?\", respuesta: resp });\n  //         return resp;\n  //     } catch (error) {\n  //         console.log({error:error, message: \"CATCH -No se encontró el usuario logueado\"});\n  //         // Puedo definir si solo mando eso, o el status y mas info o solo el \"error\"\n  //         throw error;\n  //     }\n  // }\n  actualizarUsuario(usuario_a_actualizar) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      debugger;\n      let jsonUser = JSON.stringify(usuario_a_actualizar);\n      // Como usamos Js en el servidor tambien, definimos asi el Content-Type\n      let headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        //'autorizacion': this.getToken(),\n        'authorization': _this2.token\n        // 'Authorization': 'Bearer clave_secreta_trabajo_final'\n      });\n\n      debugger;\n      try {\n        // Devolvemos la petición AJAX\n        var resp = yield firstValueFrom(_this2._http.put(_this2.url + 'actualizar-usuario/' + usuario_a_actualizar._id, jsonUser, {\n          headers: headers\n        }));\n        if (resp) {\n          console.log(resp);\n          // Deberiamos formar un objeto con el UsuarioPersona para luego cambiar la variable\n          return resp;\n        } else {\n          console.log('Ocurrio un error al actualizar el usuario');\n          return null;\n        }\n      } catch (error) {\n        debugger;\n        throw error.error.mensaje;\n      }\n    })();\n  }\n  getIdentity() {\n    debugger;\n    let identity = localStorage.getItem('identity');\n    // const identityString = identity ? JSON.stringify(identity) : '';\n    // if(identityString != 'undefined' && identityString != ''){\n    //     this.identity = identityString;\n    // }else{\n    //     this.identity = null;\n    // }\n    return localStorage.getItem('identity');\n    // return this.identity;\n  }\n\n  getToken() {\n    let token = localStorage.getItem('token');\n    const tokenString = token ? JSON.stringify(token) : '';\n    if (tokenString != 'undefined' && tokenString != '') {\n      this.token = tokenString;\n    } else {\n      this.token = null;\n    }\n    return this.token;\n  }\n}\nUsuarioServices.ɵfac = function UsuarioServices_Factory(t) {\n  return new (t || UsuarioServices)(i0.ɵɵinject(i1.HttpClient));\n};\nUsuarioServices.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsuarioServices,\n  factory: UsuarioServices.ɵfac,\n  providedIn: 'root'\n});\nexport { UsuarioServices };","map":{"version":3,"names":["catchError","map","firstValueFrom","GLOBAL","HttpHeaders","UsuarioServices","constructor","_http","url","signUp","usuario_a_loguear","gethash","_this","_asyncToGenerator","jsonUser","JSON","stringify","headers","resp","post","pipe","response","error","message","actualizarUsuario","usuario_a_actualizar","_this2","token","put","_id","console","log","mensaje","getIdentity","identity","localStorage","getItem","getToken","tokenString","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\wamp\\www\\rosario-snack\\cliente\\src\\app\\services\\usuario.services.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { firstValueFrom, identity } from 'rxjs';\r\n\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { GLOBAL } from './global';\r\nimport { Usuario } from '../models/usuario';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { UsuarioPersona } from '../models/usuarioPersona';\r\n\r\n// Decorador\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\nexport class UsuarioServices{\r\n\r\n    public url: string;\r\n    public identity:any;\r\n    public token:any;\r\n\r\n    // constructor( private _httpClient: HttpClient ){\r\n    constructor( private _http: HttpClient ){\r\n        this.url = GLOBAL.url;\r\n    }\r\n\r\n    // *** LOGUEAR USUARIO ***\r\n    async signUp(usuario_a_loguear: Usuario, gethash = false){\r\n        \r\n        try {\r\n            if(gethash){\r\n                usuario_a_loguear.gethash = gethash; \r\n            }\r\n            \r\n            let jsonUser = JSON.stringify(usuario_a_loguear);            \r\n    \r\n            // Como usamos Js en el servidor tambien, definimos asi el Content-Type\r\n            let headers = new HttpHeaders({\r\n                'Content-Type':'application/json',\r\n                //'authorization': this.token,\r\n                'Authorization': 'Bearer clave_secreta_trabajo_final'\r\n            });\r\n                           \r\n            // Devolvemos la petición AJAX\r\n            var resp = await firstValueFrom(this._http.post( this.url + 'loguear-usuario', jsonUser, { headers: headers })            \r\n                .pipe(\r\n                    map(response => {\r\n\r\n                        return response;\r\n\r\n                    }),\r\n                    // Error arrojado desde el usuario.js. Clave incorrecta, usuario incorrecto, etc..\r\n                    catchError(error => {                         \r\n                        // Puedo definir si solo mando eso, o el status y mas info o solo el \"error\"\r\n                        throw error.error.message;\r\n                    }))\r\n                );\r\n                        \r\n            return resp;\r\n                            \r\n        } catch (error) {            \r\n            throw error\r\n        }\r\n    }\r\n\r\n    // async registroUsuario(usuario_a_registrar: UsuarioPersona){\r\n        \r\n    //     var usuarioP = new Usuario('','','','','','ROLE_USER','', new Date, new Date, false); \r\n\r\n    //     let jsonUsuarioRegistro = JSON.stringify(usuarioP); \r\n    //     let params = jsonUsuarioRegistro;\r\n     \r\n    //     // Como usamos Js en el servidor tambien, definimos asi el Content-Type\r\n    //     // let headers = new HttpHeaders({\r\n    //     //     'Content-Type':'application/json',\r\n    //     //     'autorizacion':'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2NDk2MGVkNWE4ZDA3OGY0NWY3YjAyNDAiLCJub21icmVfdXN1YXJpbyI6Ik1hbnVVc2VyIiwiZW1haWwiOiJtYW51cGVyZXpAZ21haWwuY29tIiwicm9sIjoiQ2xpZW50ZSIsImltYWdlbiI6Im51bGwiLCJpYXQiOjE2OTE1MzE2MDEsImV4cCI6MTY5NDEyMzYwMX0.i0fL37ACEC2I_oWrwPDGfXrHGK2eDCfnarXK17hAgmA',\r\n    //     //     'Authorization': 'Bearer clave_secreta_trabajo_final'\r\n    //     // });\r\n\r\n    //     const headers = new HttpHeaders({\r\n    //         'Content-Type': 'application/json' // 'application/x-www-form-urlencoded'\r\n    //     });\r\n\r\n    //     try {\r\n    //         // Devolvemos la petición AJAX\r\n    //         const resp = await this._http.post( this.url + 'guardar-persona', params, {headers: headers} )\r\n    //         .pipe(                \r\n    //             map(response => {\r\n    //                 debugger;\r\n    //                 console.log( {resp: response, message: \"Respuesta dentro del pipe.map...\"} );\r\n    //                 //return response;\r\n    //             }),\r\n    //             // Error arrojado desde el usuario.js. Clave incorrecta, usuario incorrecto, etc..\r\n    //             catchError(error => { \r\n    //                 debugger;\r\n    //                 console.log({error:error.error.message, message: \"No se encontró el usuario logueado\"});\r\n                    \r\n    //                 // Puedo definir si solo mando eso, o el status y mas info o solo el \"error\"\r\n    //                 throw error.error.message;\r\n    //             }));     \r\n            \r\n    //         // var resp = await this._http.get( this.url + 'probando-controlador', { headers: headers })  \r\n    //         //     .pipe(\r\n    //         //         map(response => {\r\n    //         //             debugger;\r\n    //         //             console.log( {resp: response, message: \"Respuesta dentro del pipe.map...\"} );\r\n    //         //             return response;\r\n    //         //         }),\r\n    //         //         // Error arrojado desde el usuario.js. Clave incorrecta, usuario incorrecto, etc..\r\n    //         //         catchError(error => { \r\n    //         //             debugger;\r\n    //         //             console.log({error:error.error.message, message: \"No se encontró el usuario logueado\"});\r\n                        \r\n    //         //             // Puedo definir si solo mando eso, o el status y mas info o solo el \"error\"\r\n    //         //             throw error.error.message;\r\n    //         //         }));  \r\n\r\n    //         console.log({ message: \"No tira error?\", respuesta: resp });\r\n    //         return resp;\r\n\r\n    //     } catch (error) {\r\n    //         console.log({error:error, message: \"CATCH -No se encontró el usuario logueado\"});\r\n            \r\n    //         // Puedo definir si solo mando eso, o el status y mas info o solo el \"error\"\r\n    //         throw error;\r\n    //     }\r\n        \r\n\r\n    // }\r\n\r\n\r\n    async actualizarUsuario( usuario_a_actualizar:any ){\r\n        \r\n        debugger;\r\n        let jsonUser = JSON.stringify(usuario_a_actualizar);            \r\n    \r\n        // Como usamos Js en el servidor tambien, definimos asi el Content-Type\r\n        let headers = new HttpHeaders({\r\n            'Content-Type':'application/json',\r\n            //'autorizacion': this.getToken(),\r\n            'authorization': this.token,\r\n            // 'Authorization': 'Bearer clave_secreta_trabajo_final'\r\n        });\r\n\r\n        debugger;\r\n\r\n        try {\r\n            // Devolvemos la petición AJAX\r\n            var resp = await firstValueFrom(this._http.put( this.url + 'actualizar-usuario/' + usuario_a_actualizar._id, jsonUser, { headers: headers }));\r\n\r\n            if(resp){\r\n                console.log(resp);\r\n\r\n                // Deberiamos formar un objeto con el UsuarioPersona para luego cambiar la variable\r\n                return resp;\r\n\r\n\r\n\r\n\r\n            }else{\r\n                console.log('Ocurrio un error al actualizar el usuario');\r\n                return null;\r\n            }\r\n\r\n        } catch (error: any) {\r\n            debugger;\r\n            throw error.error.mensaje;\r\n        }\r\n        \r\n\r\n    }\r\n\r\n\r\n    getIdentity(){     \r\n        debugger;   \r\n        let identity = localStorage.getItem('identity');\r\n        // const identityString = identity ? JSON.stringify(identity) : '';\r\n\r\n        // if(identityString != 'undefined' && identityString != ''){\r\n        //     this.identity = identityString;\r\n        // }else{\r\n        //     this.identity = null;\r\n        // }\r\n\r\n        return localStorage.getItem('identity');\r\n        // return this.identity;\r\n    }\r\n\r\n    getToken(){\r\n        let token = localStorage.getItem('token');\r\n        const tokenString = token ? JSON.stringify(token) : '';\r\n\r\n        if(tokenString != 'undefined' && tokenString != ''){\r\n            this.token = tokenString;\r\n        }else{\r\n            this.token = null;\r\n        } \r\n\r\n        return this.token;\r\n    }\r\n    \r\n} \r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}