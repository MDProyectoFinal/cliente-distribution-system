{"ast":null,"code":"import { Observable } from 'rxjs';\n// import 'rxjs/add/operator/map';\n// import { Observable } from 'rxjs/Observable';\nimport { GLOBAL } from './global';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Decorador\nclass UsuarioServices {\n  // constructor( private _httpClient: HttpClient ){\n  constructor(_http) {\n    this._http = _http;\n    this.url = GLOBAL.url;\n  }\n  signUp(usuario_a_loguear, gethash = false) {\n    if (gethash) {\n      usuario_a_loguear.gethash = gethash;\n    }\n    let json = JSON.stringify(usuario_a_loguear);\n    let params = json;\n    // Como usamos Js en el servidor tambien, definimos asi el Content-Type\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    console.log(headers);\n    // console.log( \"Params:\" + params);\n    console.log(this.url + 'loguear-usuario');\n    // const { email, clave } = params;        \n    login(username, string, password, string);\n    Observable < any > {\n      return: this.http.post(this.url + 'loguear-usuario', params)\n    };\n    // Devolvemos la petición AJAX\n    // return this._http.post( this.url + 'loguear-usuario', params ) //, { headers: headers })\n    //         .pipe(\n    //             map( (response: any) =>{\n    //                 response.json();\n    //             }),\n    //             catchError((error: any) => {\n    //                 // Lógica de manejo de errores\n    //                 console.error('Ocurrió un error al obtener el usuario:', error);\n    //                 return throwError(() => new Error('Ocurrió un error al obtener el usuario:' + error))\n    //                 })\n    //         );        \n  }\n}\n\nUsuarioServices.ɵfac = function UsuarioServices_Factory(t) {\n  return new (t || UsuarioServices)(i0.ɵɵinject(i1.HttpClient));\n};\nUsuarioServices.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsuarioServices,\n  factory: UsuarioServices.ɵfac,\n  providedIn: 'root'\n});\nexport { UsuarioServices };","map":{"version":3,"names":["Observable","GLOBAL","HttpHeaders","UsuarioServices","constructor","_http","url","signUp","usuario_a_loguear","gethash","json","JSON","stringify","params","headers","console","log","login","username","string","password","any","return","http","post","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\wamp\\www\\rosario-snack\\cliente\\src\\app\\services\\usuario.services.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Observable, throwError, pipe } from 'rxjs';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\n// import 'rxjs/add/operator/map';\r\n// import { Observable } from 'rxjs/Observable';\r\nimport { GLOBAL } from './global';\r\nimport { Usuario } from '../models/usuario';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\n\r\n// Decorador\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\nexport class UsuarioServices{\r\n\r\n    public url: string;\r\n\r\n    // constructor( private _httpClient: HttpClient ){\r\n    constructor( private _http: HttpClient ){\r\n        this.url = GLOBAL.url;\r\n    }\r\n\r\n    signUp(usuario_a_loguear: Usuario, gethash = false){\r\n        if(gethash){\r\n            usuario_a_loguear.gethash = gethash; \r\n        }\r\n\r\n        let json = JSON.stringify(usuario_a_loguear);\r\n        let params = json;\r\n\r\n        // Como usamos Js en el servidor tambien, definimos asi el Content-Type\r\n        let headers = new HttpHeaders({\r\n            'Content-Type':'application/json'\r\n        });\r\n\r\n        console.log( headers);\r\n        // console.log( \"Params:\" + params);\r\n        console.log( this.url + 'loguear-usuario');\r\n        \r\n        // const { email, clave } = params;        \r\n\r\n        login(username: string, password: string): Observable<any> {\r\n            return this.http.post(this.url + 'loguear-usuario', params );\r\n        }\r\n        // Devolvemos la petición AJAX\r\n        // return this._http.post( this.url + 'loguear-usuario', params ) //, { headers: headers })\r\n        //         .pipe(\r\n        //             map( (response: any) =>{\r\n        //                 response.json();\r\n        //             }),\r\n        //             catchError((error: any) => {\r\n        //                 // Lógica de manejo de errores\r\n        //                 console.error('Ocurrió un error al obtener el usuario:', error);\r\n        //                 return throwError(() => new Error('Ocurrió un error al obtener el usuario:' + error))\r\n        //                 })\r\n        //         );        \r\n    }\r\n} \r\n\r\n"],"mappings":"AAGA,SAASA,UAAU,QAA0B,MAAM;AAGnD;AACA;AACA,SAASC,MAAM,QAAQ,UAAU;AAEjC,SAASC,WAAW,QAAQ,sBAAsB;;;AAGlD;AACA,MAGaC,eAAe;EAIxB;EACAC,YAAqBC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IACtB,IAAI,CAACC,GAAG,GAAGL,MAAM,CAACK,GAAG;EACzB;EAEAC,MAAMA,CAACC,iBAA0B,EAAEC,OAAO,GAAG,KAAK;IAC9C,IAAGA,OAAO,EAAC;MACPD,iBAAiB,CAACC,OAAO,GAAGA,OAAO;;IAGvC,IAAIC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACJ,iBAAiB,CAAC;IAC5C,IAAIK,MAAM,GAAGH,IAAI;IAEjB;IACA,IAAII,OAAO,GAAG,IAAIZ,WAAW,CAAC;MAC1B,cAAc,EAAC;KAClB,CAAC;IAEFa,OAAO,CAACC,GAAG,CAAEF,OAAO,CAAC;IACrB;IACAC,OAAO,CAACC,GAAG,CAAE,IAAI,CAACV,GAAG,GAAG,iBAAiB,CAAC;IAE1C;IAEAW,KAAK,CAACC,QAAQ,EAAEC,MAAM,EAAEC,QAAQ,EAAED,MAAM,CAAC;IAAEnB,UAAU,GAACqB,GAAG,GAAE;MACvDC,MAAM,EAAC,IAAI,CAACC,IAAI,CAACC,IAAI,CAAC,IAAI,CAAClB,GAAG,GAAG,iBAAiB,EAAEO,MAAM;KAC7D;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ;;;AA3CSV,eAAe,C;mBAAfA,eAAe,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAfzB,eAAe,C;SAAfA,eAAe;EAAA0B,OAAA,EAAf1B,eAAe,CAAA2B,IAAA;EAAAC,UAAA,EAFZ;AAAM;SAET5B,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}