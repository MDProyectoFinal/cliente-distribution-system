{"ast":null,"code":"import _asyncToGenerator from \"C:/wamp/www/rosario-snack/cliente/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n// import 'rxjs/add/operator/map';\n// import { Observable } from 'rxjs/Observable';\nimport { GLOBAL } from './global';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Decorador\nclass UsuarioServices {\n  // constructor( private _httpClient: HttpClient ){\n  constructor(_http) {\n    this._http = _http;\n    this.url = GLOBAL.url;\n  }\n  signUp(usuario_a_loguear, gethash = false) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        if (gethash) {\n          usuario_a_loguear.gethash = gethash;\n        }\n        console.log({\n          usuario: usuario_a_loguear,\n          message: \"Usuario en usuarioServices:\"\n        });\n        var email = usuario_a_loguear.email;\n        var clave = usuario_a_loguear.clave;\n        let json = JSON.stringify(usuario_a_loguear);\n        let params = json;\n        // Como usamos Js en el servidor tambien, definimos asi el Content-Type\n        let headers = new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer clave_secreta_trabajo_final'\n        });\n        const options = {\n          headers\n        };\n        console.log({\n          json: json,\n          message: \"Usuario en Json:\"\n        });\n        console.log(options);\n        // console.log( \"Params:\" + params);\n        console.log(_this.url + 'loguear-usuario');\n        // const { email, clave } = params;        \n        //const response = await this._http.post(this.url + 'loguear-usuario', {email:email, clave:clave}, options );\n        //console.log({response:response, message:\"Respuesta luego de llamar al loguear-usuario\"});\n        // login(usuario_a_loguear.email: string, usuario_a_loguear.clave: string): Observable<any> {\n        //     return this.http.post(this.url + 'loguear-usuario', params );\n        // }\n        // Devolvemos la petición AJAX\n        return yield _this._http.post(_this.url + 'loguear-usuario', params) //, { headers: headers })\n        .pipe(map(response => {\n          console.log({\n            message: \"Funciona?\",\n            resp: response.json()\n          });\n          response.json();\n        }), catchError(error => {\n          // Lógica de manejo de errores\n          console.error('Ocurrió un error al obtener el usuario:', error);\n          return throwError(() => new Error('Ocurrió un error al obtener el usuario:' + error));\n        }));\n      } catch (error) {\n        console.error('Ocurrió un error en el catch principal:', error);\n        throw error;\n      }\n    })();\n  }\n}\nUsuarioServices.ɵfac = function UsuarioServices_Factory(t) {\n  return new (t || UsuarioServices)(i0.ɵɵinject(i1.HttpClient));\n};\nUsuarioServices.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsuarioServices,\n  factory: UsuarioServices.ɵfac,\n  providedIn: 'root'\n});\nexport { UsuarioServices };","map":{"version":3,"names":["catchError","map","throwError","GLOBAL","HttpHeaders","UsuarioServices","constructor","_http","url","signUp","usuario_a_loguear","gethash","_this","_asyncToGenerator","console","log","usuario","message","email","clave","json","JSON","stringify","params","headers","options","post","pipe","response","resp","error","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\wamp\\www\\rosario-snack\\cliente\\src\\app\\services\\usuario.services.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Observable, throwError, pipe } from 'rxjs';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\n// import 'rxjs/add/operator/map';\r\n// import { Observable } from 'rxjs/Observable';\r\nimport { GLOBAL } from './global';\r\nimport { Usuario } from '../models/usuario';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\n\r\n// Decorador\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\nexport class UsuarioServices{\r\n\r\n    public url: string;\r\n\r\n    // constructor( private _httpClient: HttpClient ){\r\n    constructor( private _http: HttpClient ){\r\n        this.url = GLOBAL.url;\r\n    }\r\n\r\n    async signUp(usuario_a_loguear: Usuario, gethash = false){\r\n        \r\n        try {\r\n            if(gethash){\r\n                usuario_a_loguear.gethash = gethash; \r\n            }\r\n    \r\n            console.log({usuario: usuario_a_loguear, message: \"Usuario en usuarioServices:\"});\r\n    \r\n            var email = usuario_a_loguear.email;\r\n            var clave = usuario_a_loguear.clave;\r\n    \r\n            let json = JSON.stringify(usuario_a_loguear);\r\n            let params = json;\r\n    \r\n            // Como usamos Js en el servidor tambien, definimos asi el Content-Type\r\n            let headers = new HttpHeaders({\r\n                'Content-Type':'application/json',\r\n                'Authorization': 'Bearer clave_secreta_trabajo_final'\r\n            });\r\n    \r\n            const options = { headers };\r\n    \r\n            console.log({json: json, message: \"Usuario en Json:\"});\r\n            console.log( options);\r\n            // console.log( \"Params:\" + params);\r\n            console.log( this.url + 'loguear-usuario');\r\n            \r\n            // const { email, clave } = params;        \r\n    \r\n            //const response = await this._http.post(this.url + 'loguear-usuario', {email:email, clave:clave}, options );\r\n\r\n            //console.log({response:response, message:\"Respuesta luego de llamar al loguear-usuario\"});\r\n            // login(usuario_a_loguear.email: string, usuario_a_loguear.clave: string): Observable<any> {\r\n            //     return this.http.post(this.url + 'loguear-usuario', params );\r\n            // }\r\n            // Devolvemos la petición AJAX\r\n            return await this._http.post( this.url + 'loguear-usuario', params ) //, { headers: headers })\r\n                    .pipe(\r\n                        map( (response: any) =>{\r\n\r\n                            console.log({message: \"Funciona?\", resp:response.json()});\r\n                            \r\n                            response.json();\r\n                        }),\r\n                        catchError((error: any) => {\r\n                            // Lógica de manejo de errores\r\n                            console.error('Ocurrió un error al obtener el usuario:', error);\r\n                            return throwError(() => new Error('Ocurrió un error al obtener el usuario:' + error))\r\n                            })\r\n                    );        \r\n        } catch (error) {\r\n            console.error('Ocurrió un error en el catch principal:', error);\r\n            throw error\r\n        }\r\n        \r\n        \r\n    }\r\n} \r\n\r\n"],"mappings":";AAEA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAAqBC,UAAU,QAAc,MAAM;AAGnD;AACA;AACA,SAASC,MAAM,QAAQ,UAAU;AAEjC,SAASC,WAAW,QAAQ,sBAAsB;;;AAGlD;AACA,MAGaC,eAAe;EAIxB;EACAC,YAAqBC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IACtB,IAAI,CAACC,GAAG,GAAGL,MAAM,CAACK,GAAG;EACzB;EAEMC,MAAMA,CAACC,iBAA0B,EAAEC,OAAO,GAAG,KAAK;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAEpD,IAAI;QACA,IAAGF,OAAO,EAAC;UACPD,iBAAiB,CAACC,OAAO,GAAGA,OAAO;;QAGvCG,OAAO,CAACC,GAAG,CAAC;UAACC,OAAO,EAAEN,iBAAiB;UAAEO,OAAO,EAAE;QAA6B,CAAC,CAAC;QAEjF,IAAIC,KAAK,GAAGR,iBAAiB,CAACQ,KAAK;QACnC,IAAIC,KAAK,GAAGT,iBAAiB,CAACS,KAAK;QAEnC,IAAIC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACZ,iBAAiB,CAAC;QAC5C,IAAIa,MAAM,GAAGH,IAAI;QAEjB;QACA,IAAII,OAAO,GAAG,IAAIpB,WAAW,CAAC;UAC1B,cAAc,EAAC,kBAAkB;UACjC,eAAe,EAAE;SACpB,CAAC;QAEF,MAAMqB,OAAO,GAAG;UAAED;QAAO,CAAE;QAE3BV,OAAO,CAACC,GAAG,CAAC;UAACK,IAAI,EAAEA,IAAI;UAAEH,OAAO,EAAE;QAAkB,CAAC,CAAC;QACtDH,OAAO,CAACC,GAAG,CAAEU,OAAO,CAAC;QACrB;QACAX,OAAO,CAACC,GAAG,CAAEH,KAAI,CAACJ,GAAG,GAAG,iBAAiB,CAAC;QAE1C;QAEA;QAEA;QACA;QACA;QACA;QACA;QACA,aAAaI,KAAI,CAACL,KAAK,CAACmB,IAAI,CAAEd,KAAI,CAACJ,GAAG,GAAG,iBAAiB,EAAEe,MAAM,CAAE,CAAC;QAAA,CAC5DI,IAAI,CACD1B,GAAG,CAAG2B,QAAa,IAAI;UAEnBd,OAAO,CAACC,GAAG,CAAC;YAACE,OAAO,EAAE,WAAW;YAAEY,IAAI,EAACD,QAAQ,CAACR,IAAI;UAAE,CAAC,CAAC;UAEzDQ,QAAQ,CAACR,IAAI,EAAE;QACnB,CAAC,CAAC,EACFpB,UAAU,CAAE8B,KAAU,IAAI;UACtB;UACAhB,OAAO,CAACgB,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;UAC/D,OAAO5B,UAAU,CAAC,MAAM,IAAI6B,KAAK,CAAC,yCAAyC,GAAGD,KAAK,CAAC,CAAC;QACrF,CAAC,CAAC,CACT;OACZ,CAAC,OAAOA,KAAK,EAAE;QACZhB,OAAO,CAACgB,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;QAC/D,MAAMA,KAAK;;IACd;EAGL;;AAlESzB,eAAe,C;mBAAfA,eAAe,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAf9B,eAAe,C;SAAfA,eAAe;EAAA+B,OAAA,EAAf/B,eAAe,CAAAgC,IAAA;EAAAC,UAAA,EAFZ;AAAM;SAETjC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}