{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n// import 'rxjs/add/operator/map';\n// import { Observable } from 'rxjs/Observable';\nimport { GLOBAL } from './global';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Decorador\nclass UsuarioServices {\n  // constructor( private _httpClient: HttpClient ){\n  constructor(_http) {\n    this._http = _http;\n    this.url = GLOBAL.url;\n  }\n  signUp(usuario_a_loguear, gethash = null) {\n    if (gethash != null) {\n      // usuario_a_loguear.gethash = gethash;\n    }\n    let json = JSON.stringify(usuario_a_loguear);\n    let params = json;\n    // Como usamos Js en el servidor tambien, definimos asi el Content-Type\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer my-token'\n    });\n    // Devolvemos la petición AJAX\n    return this._http.post(this.url + 'loguear-usuario', params, {\n      headers\n    }).pipe(map(response => {\n      response.json();\n    }), catchError(error => {\n      // Lógica de manejo de errores\n      console.error('Ocurrió un error al obtener el usuario:', error);\n      return throwError(() => new Error('Ocurrió un error al obtener el usuario:'));\n    }));\n  }\n}\nUsuarioServices.ɵfac = function UsuarioServices_Factory(t) {\n  return new (t || UsuarioServices)(i0.ɵɵinject(i1.HttpClient));\n};\nUsuarioServices.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsuarioServices,\n  factory: UsuarioServices.ɵfac\n});\nexport { UsuarioServices };","map":{"version":3,"names":["catchError","map","throwError","GLOBAL","HttpHeaders","UsuarioServices","constructor","_http","url","signUp","usuario_a_loguear","gethash","json","JSON","stringify","params","headers","post","pipe","response","error","console","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac"],"sources":["C:\\wamp\\www\\rosario-snack\\cliente\\src\\app\\services\\usuario.services.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Observable, throwError, pipe } from 'rxjs';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\n// import 'rxjs/add/operator/map';\r\n// import { Observable } from 'rxjs/Observable';\r\nimport { GLOBAL } from './global';\r\nimport { Usuario } from '../models/usuario';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\n\r\n// Decorador\r\n@Injectable()\r\nexport class UsuarioServices{\r\n\r\n    public url: string;\r\n\r\n    // constructor( private _httpClient: HttpClient ){\r\n    constructor( private _http: HttpClient ){\r\n        this.url = GLOBAL.url;\r\n    }\r\n\r\n    signUp(usuario_a_loguear: Usuario, gethash = null){\r\n        if(gethash != null){\r\n            // usuario_a_loguear.gethash = gethash;\r\n        }\r\n\r\n        let json = JSON.stringify(usuario_a_loguear);\r\n        let params = json;\r\n\r\n        // Como usamos Js en el servidor tambien, definimos asi el Content-Type\r\n        let headers = new HttpHeaders({\r\n            'Content-Type':'application/json',\r\n            'Authorization': 'Bearer my-token'\r\n        });\r\n\r\n        // Devolvemos la petición AJAX\r\n        return this._http.post( this.url + 'loguear-usuario', params, { headers })\r\n                            .pipe(\r\n                                map( (response: any) =>{\r\n                                    response.json();\r\n                                }),\r\n                                catchError((error: any) => {\r\n                                    // Lógica de manejo de errores\r\n                                    console.error('Ocurrió un error al obtener el usuario:', error);\r\n                                    return throwError(() => new Error('Ocurrió un error al obtener el usuario:'))\r\n                                 })\r\n                            );        \r\n    }\r\n} \r\n\r\n"],"mappings":"AAEA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAAqBC,UAAU,QAAc,MAAM;AAGnD;AACA;AACA,SAASC,MAAM,QAAQ,UAAU;AAEjC,SAASC,WAAW,QAAQ,sBAAsB;;;AAGlD;AACA,MACaC,eAAe;EAIxB;EACAC,YAAqBC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IACtB,IAAI,CAACC,GAAG,GAAGL,MAAM,CAACK,GAAG;EACzB;EAEAC,MAAMA,CAACC,iBAA0B,EAAEC,OAAO,GAAG,IAAI;IAC7C,IAAGA,OAAO,IAAI,IAAI,EAAC;MACf;IAAA;IAGJ,IAAIC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACJ,iBAAiB,CAAC;IAC5C,IAAIK,MAAM,GAAGH,IAAI;IAEjB;IACA,IAAII,OAAO,GAAG,IAAIZ,WAAW,CAAC;MAC1B,cAAc,EAAC,kBAAkB;MACjC,eAAe,EAAE;KACpB,CAAC;IAEF;IACA,OAAO,IAAI,CAACG,KAAK,CAACU,IAAI,CAAE,IAAI,CAACT,GAAG,GAAG,iBAAiB,EAAEO,MAAM,EAAE;MAAEC;IAAO,CAAE,CAAC,CACrDE,IAAI,CACDjB,GAAG,CAAGkB,QAAa,IAAI;MACnBA,QAAQ,CAACP,IAAI,EAAE;IACnB,CAAC,CAAC,EACFZ,UAAU,CAAEoB,KAAU,IAAI;MACtB;MACAC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,OAAOlB,UAAU,CAAC,MAAM,IAAIoB,KAAK,CAAC,yCAAyC,CAAC,CAAC;IAChF,CAAC,CAAC,CACN;EACzB;;AAnCSjB,eAAe,C;mBAAfA,eAAe,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAfrB,eAAe,C;SAAfA,eAAe;EAAAsB,OAAA,EAAftB,eAAe,CAAAuB;AAAA;SAAfvB,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}