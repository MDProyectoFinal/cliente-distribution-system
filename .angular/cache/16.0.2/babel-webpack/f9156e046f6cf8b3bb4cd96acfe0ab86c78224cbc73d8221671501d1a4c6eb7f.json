{"ast":null,"code":"import _asyncToGenerator from \"C:/wamp/www/rosario-snack/cliente/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\n// import 'rxjs/add/operator/map';\n// import { Observable } from 'rxjs/Observable';\nimport { GLOBAL } from './global';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Decorador\nclass UsuarioServices {\n  // constructor( private _httpClient: HttpClient ){\n  constructor(_http) {\n    this._http = _http;\n    this.url = GLOBAL.url;\n  }\n  signUp(usuario_a_loguear, gethash = false) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (gethash) {\n        usuario_a_loguear.gethash = gethash;\n      }\n      console.log({\n        usuario: usuario_a_loguear,\n        message: \"Usuario en usuarioServices:\"\n      });\n      var email = usuario_a_loguear.email;\n      var clave = usuario_a_loguear.clave;\n      let json = JSON.stringify(usuario_a_loguear);\n      let params = json;\n      // Como usamos Js en el servidor tambien, definimos asi el Content-Type\n      let headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      const options = {\n        headers\n      };\n      console.log({\n        json: json,\n        message: \"Usuario en Json:\"\n      });\n      console.log(options);\n      // console.log( \"Params:\" + params);\n      console.log(_this.url + 'loguear-usuario');\n      // const { email, clave } = params;        \n      // login(usuario_a_loguear.email: string, usuario_a_loguear.clave: string): Observable<any> {\n      //     return this.http.post(this.url + 'loguear-usuario', params );\n      // }\n      // Devolvemos la petición AJAX\n      return yield _this._http.post(_this.url + 'loguear-usuario', params, options) //, { headers: headers })\n      .pipe(map(response => {\n        response.json();\n      }), catchError(error => {\n        // Lógica de manejo de errores\n        console.error('Ocurrió un error al obtener el usuario:', error);\n        return throwError(() => new Error('Ocurrió un error al obtener el usuario:' + error));\n      }));\n    })();\n  }\n}\nUsuarioServices.ɵfac = function UsuarioServices_Factory(t) {\n  return new (t || UsuarioServices)(i0.ɵɵinject(i1.HttpClient));\n};\nUsuarioServices.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsuarioServices,\n  factory: UsuarioServices.ɵfac,\n  providedIn: 'root'\n});\nexport { UsuarioServices };","map":{"version":3,"names":["catchError","map","throwError","GLOBAL","HttpHeaders","UsuarioServices","constructor","_http","url","signUp","usuario_a_loguear","gethash","_this","_asyncToGenerator","console","log","usuario","message","email","clave","json","JSON","stringify","params","headers","options","post","pipe","response","error","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\wamp\\www\\rosario-snack\\cliente\\src\\app\\services\\usuario.services.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Observable, throwError, pipe } from 'rxjs';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\n// import 'rxjs/add/operator/map';\r\n// import { Observable } from 'rxjs/Observable';\r\nimport { GLOBAL } from './global';\r\nimport { Usuario } from '../models/usuario';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\n\r\n// Decorador\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\nexport class UsuarioServices{\r\n\r\n    public url: string;\r\n\r\n    // constructor( private _httpClient: HttpClient ){\r\n    constructor( private _http: HttpClient ){\r\n        this.url = GLOBAL.url;\r\n    }\r\n\r\n    async signUp(usuario_a_loguear: Usuario, gethash = false){\r\n        if(gethash){\r\n            usuario_a_loguear.gethash = gethash; \r\n        }\r\n\r\n        console.log({usuario: usuario_a_loguear, message: \"Usuario en usuarioServices:\"});\r\n\r\n        var email = usuario_a_loguear.email;\r\n        var clave = usuario_a_loguear.clave;\r\n\r\n        let json = JSON.stringify(usuario_a_loguear);\r\n        let params = json;\r\n\r\n        // Como usamos Js en el servidor tambien, definimos asi el Content-Type\r\n        let headers = new HttpHeaders({\r\n            'Content-Type':'application/json'\r\n        });\r\n\r\n        const options = { headers };\r\n\r\n        console.log({json: json, message: \"Usuario en Json:\"});\r\n        console.log( options);\r\n        // console.log( \"Params:\" + params);\r\n        console.log( this.url + 'loguear-usuario');\r\n        \r\n        // const { email, clave } = params;        \r\n\r\n        // login(usuario_a_loguear.email: string, usuario_a_loguear.clave: string): Observable<any> {\r\n        //     return this.http.post(this.url + 'loguear-usuario', params );\r\n        // }\r\n        // Devolvemos la petición AJAX\r\n        return await this._http.post( this.url + 'loguear-usuario', params, options ) //, { headers: headers })\r\n                .pipe(\r\n                    map( (response: any) =>{\r\n                        response.json();\r\n                    }),\r\n                    catchError((error: any) => {\r\n                        // Lógica de manejo de errores\r\n                        console.error('Ocurrió un error al obtener el usuario:', error);\r\n                        return throwError(() => new Error('Ocurrió un error al obtener el usuario:' + error))\r\n                        })\r\n                );        \r\n    }\r\n} \r\n\r\n"],"mappings":";AAEA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAAqBC,UAAU,QAAc,MAAM;AAGnD;AACA;AACA,SAASC,MAAM,QAAQ,UAAU;AAEjC,SAASC,WAAW,QAAQ,sBAAsB;;;AAGlD;AACA,MAGaC,eAAe;EAIxB;EACAC,YAAqBC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IACtB,IAAI,CAACC,GAAG,GAAGL,MAAM,CAACK,GAAG;EACzB;EAEMC,MAAMA,CAACC,iBAA0B,EAAEC,OAAO,GAAG,KAAK;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACpD,IAAGF,OAAO,EAAC;QACPD,iBAAiB,CAACC,OAAO,GAAGA,OAAO;;MAGvCG,OAAO,CAACC,GAAG,CAAC;QAACC,OAAO,EAAEN,iBAAiB;QAAEO,OAAO,EAAE;MAA6B,CAAC,CAAC;MAEjF,IAAIC,KAAK,GAAGR,iBAAiB,CAACQ,KAAK;MACnC,IAAIC,KAAK,GAAGT,iBAAiB,CAACS,KAAK;MAEnC,IAAIC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACZ,iBAAiB,CAAC;MAC5C,IAAIa,MAAM,GAAGH,IAAI;MAEjB;MACA,IAAII,OAAO,GAAG,IAAIpB,WAAW,CAAC;QAC1B,cAAc,EAAC;OAClB,CAAC;MAEF,MAAMqB,OAAO,GAAG;QAAED;MAAO,CAAE;MAE3BV,OAAO,CAACC,GAAG,CAAC;QAACK,IAAI,EAAEA,IAAI;QAAEH,OAAO,EAAE;MAAkB,CAAC,CAAC;MACtDH,OAAO,CAACC,GAAG,CAAEU,OAAO,CAAC;MACrB;MACAX,OAAO,CAACC,GAAG,CAAEH,KAAI,CAACJ,GAAG,GAAG,iBAAiB,CAAC;MAE1C;MAEA;MACA;MACA;MACA;MACA,aAAaI,KAAI,CAACL,KAAK,CAACmB,IAAI,CAAEd,KAAI,CAACJ,GAAG,GAAG,iBAAiB,EAAEe,MAAM,EAAEE,OAAO,CAAE,CAAC;MAAA,CACrEE,IAAI,CACD1B,GAAG,CAAG2B,QAAa,IAAI;QACnBA,QAAQ,CAACR,IAAI,EAAE;MACnB,CAAC,CAAC,EACFpB,UAAU,CAAE6B,KAAU,IAAI;QACtB;QACAf,OAAO,CAACe,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;QAC/D,OAAO3B,UAAU,CAAC,MAAM,IAAI4B,KAAK,CAAC,yCAAyC,GAAGD,KAAK,CAAC,CAAC;MACrF,CAAC,CAAC,CACT;IAAC;EACd;;AAnDSxB,eAAe,C;mBAAfA,eAAe,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAf7B,eAAe,C;SAAfA,eAAe;EAAA8B,OAAA,EAAf9B,eAAe,CAAA+B,IAAA;EAAAC,UAAA,EAFZ;AAAM;SAEThC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}