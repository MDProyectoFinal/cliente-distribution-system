{"ast":null,"code":"import _asyncToGenerator from \"C:/wamp/www/rosario-snack/cliente/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { UsuarioServices } from './services/usuario.services';\nimport { Usuario } from './models/usuario';\nimport { Persona } from './models/persona';\nimport { UsuarioPersona } from './models/usuarioPersona';\nlet AppComponent = class AppComponent {\n  //public usuariosEncontrados: Usuario[] = []; // Arreglo de usuarios\n  constructor(_usuarioServices) {\n    this._usuarioServices = _usuarioServices;\n    this.title = 'DistributionSystem';\n    // public persona: Persona;\n    this.identity = null; // Datos del usuario identificado ahi dentro. Guardado en localStorage\n    this.token = null;\n    this.errorMensaje = \"\";\n    this.usuario = new Usuario('', '', '', '', '', 'ROLE_USER', '', new Date(), new Date(), false);\n    // this.persona = new Persona('','','','','','','');  \n    // Opcion 1\n    this.usuario_persona_registro = new UsuarioPersona('', new Persona('', '', '', '', '', ''), '', '', '', 'ROLE_USER');\n    // Opcion 2\n    this.usuario_persona_registro2 = ['', '', '', '', '', '', '', '', '', '', '']; // Datos de usuario y persona mezclados\n  }\n  // Ni bien carga el componente\n  ngOnInit() {\n    this.identity = this._usuarioServices.getIdentity(); // \"\"\n    this.token = this._usuarioServices.getToken(); // \"\"\n  }\n\n  onSubmit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      //console.log(this.usuario);\n      console.log({\n        usuario: _this.usuario,\n        message: \"Usuario en AppComponent.componente:\"\n      });\n      try {\n        // const response = (await this._usuarioServices.signUp(this.usuario))\n        // console.log({response: response, message: \"mensaje de respuesta en el onSubmit\"});\n        // Conseguimos los datos del USUARIO IDENTIFICADO\n        const response = yield _this._usuarioServices.signUp(_this.usuario).then(usuarioEncontrado => {\n          console.log(usuarioEncontrado); // Imprimir el objeto de usuario en la consola          \n          // Realizar otras operaciones con el objeto de usuario aquí\n          _this.errorMensaje = \"\";\n          let identity = usuarioEncontrado;\n          _this.identity = identity;\n          if (!_this.identity._id) {\n            alert(\"El usuario no está correctamente logueado\");\n          } else {\n            // Crear elemento en el localstorage para tener al usuario sesión\n            localStorage.setItem('identity', JSON.stringify(_this.identity));\n            // FORMA 1!!!!!!!\n            _this._usuarioServices.signUp(_this.usuario, true).then(data => {\n              _this.token = data.token.toString();\n              console.log(_this.token);\n              if (_this.token.length <= 0) {\n                alert('El token no fue generado correctamente');\n              } else {\n                debugger;\n                // Crear elemento en el localstorage para tener el token del usuario logueado\n                localStorage.setItem('token', _this.token);\n                console.log(identity);\n                console.log(_this.token);\n                // Conseguir el TOKEN para enviarselo a cada petición HTTP\n              }\n              // Realiza otras operaciones con el objeto de usuario aquí\n            }).catch(error => {\n              console.error('Error al obtener el usuario:', error);\n            });\n          }\n        }).catch(error => {\n          _this.errorMensaje = error;\n          console.error('Error al obtener el usuario:', error);\n        });\n      } catch (error) {\n        _this.errorMensaje = error;\n        console.error('Ocurrió un error el OnSubmit:', error);\n      }\n    })();\n  }\n  logout() {\n    localStorage.removeItem('identity');\n    localStorage.removeItem('token');\n    localStorage.clear();\n    this.identity = null;\n    this.token = null;\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  providers: [UsuarioServices]\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"names":["Component","UsuarioServices","Usuario","Persona","UsuarioPersona","AppComponent","constructor","_usuarioServices","title","identity","token","errorMensaje","usuario","Date","usuario_persona_registro","usuario_persona_registro2","ngOnInit","getIdentity","getToken","onSubmit","_this","_asyncToGenerator","console","log","message","response","signUp","then","usuarioEncontrado","_id","alert","localStorage","setItem","JSON","stringify","data","toString","length","catch","error","logout","removeItem","clear","__decorate","selector","templateUrl","providers"],"sources":["C:\\wamp\\www\\rosario-snack\\cliente\\src\\app\\app.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { UsuarioServices } from './services/usuario.services';\nimport { Usuario } from './models/usuario';\nimport { Persona } from './models/persona';\nimport { UsuarioPersona } from './models/usuarioPersona';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  providers: [UsuarioServices]\n})\n\nexport class AppComponent implements OnInit {\n  public title = 'DistributionSystem';\n  public usuario: Usuario;\n  public usuario_persona_registro: UsuarioPersona;\n  public usuario_persona_registro2: any;\n  // public persona: Persona;\n  public identity = <any>null; // Datos del usuario identificado ahi dentro. Guardado en localStorage\n  public token = <any>null;\n  public errorMensaje = \"\";\n  //public usuariosEncontrados: Usuario[] = []; // Arreglo de usuarios\n\n  constructor(\n    private _usuarioServices: UsuarioServices\n  ){\n    this.usuario = new Usuario('','','','','','ROLE_USER','', new Date, new Date, false);  \n    // this.persona = new Persona('','','','','','','');  \n\n    // Opcion 1\n    this.usuario_persona_registro = new UsuarioPersona('', new Persona('','','','','',''),'','','','ROLE_USER');  \n    // Opcion 2\n    this.usuario_persona_registro2 = ['','','','','','','','','','',''] // Datos de usuario y persona mezclados\n  }\n\n  // Ni bien carga el componente\n  ngOnInit(){\n    this.identity = this._usuarioServices.getIdentity(); // \"\"\n    this.token = this._usuarioServices.getToken(); // \"\"\n  }\n\n  public async onSubmit(): Promise<void>{\n    //console.log(this.usuario);\n    console.log({usuario: this.usuario, message: \"Usuario en AppComponent.componente:\"});\n  \n    try {\n      // const response = (await this._usuarioServices.signUp(this.usuario))\n      // console.log({response: response, message: \"mensaje de respuesta en el onSubmit\"});\n      \n      // Conseguimos los datos del USUARIO IDENTIFICADO\n      const response = await this._usuarioServices.signUp(this.usuario)\n        .then(usuarioEncontrado => {\n          \n          console.log(usuarioEncontrado); // Imprimir el objeto de usuario en la consola          \n          \n          // Realizar otras operaciones con el objeto de usuario aquí\n          this.errorMensaje = \"\";\n\n          let identity = usuarioEncontrado;\n          this.identity = identity;\n\n          if(!this.identity._id){\n            alert(\"El usuario no está correctamente logueado\");\n          }else{\n            \n            // Crear elemento en el localstorage para tener al usuario sesión\n            localStorage.setItem('identity', JSON.stringify(this.identity) )\n\n            // FORMA 1!!!!!!!\n            this._usuarioServices.signUp(this.usuario, true).then((data: any) => {\n               \n              this.token = data.token.toString();\n              console.log(this.token);\n\n              if(this.token.length <= 0){\n                alert('El token no fue generado correctamente');\n              }else{\n                \n                debugger;\n                // Crear elemento en el localstorage para tener el token del usuario logueado\n                localStorage.setItem('token', this.token )\n\n                console.log(identity);\n                console.log(this.token);  \n\n                // Conseguir el TOKEN para enviarselo a cada petición HTTP\n\n\n              }\n\n              // Realiza otras operaciones con el objeto de usuario aquí\n            }).catch((error) => {\n              console.error('Error al obtener el usuario:', error);\n            });\n          }\n\n        })\n\n        .catch(error => {\n          this.errorMensaje = <any>error;\n          console.error('Error al obtener el usuario:', error);\n        });\n      \n    } catch (error) {\n      this.errorMensaje = <any>error;\n      console.error('Ocurrió un error el OnSubmit:', error);\n    }\n     \n  }\n\n  logout(){\n    localStorage.removeItem('identity');\n    localStorage.removeItem('token');\n    localStorage.clear();\n\n    this.identity = null;\n    this.token = null;\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}