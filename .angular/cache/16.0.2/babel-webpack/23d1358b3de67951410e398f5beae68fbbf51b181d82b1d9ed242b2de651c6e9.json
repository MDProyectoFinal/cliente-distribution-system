{"ast":null,"code":"import _asyncToGenerator from \"C:/wamp/www/rosario-snack/cliente/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { catchError } from 'rxjs/operators';\nimport { firstValueFrom } from 'rxjs';\n// import 'rxjs/add/operator/map';\n// import { Observable } from 'rxjs/Observable';\nimport { GLOBAL } from './global';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Decorador\nclass UsuarioServices {\n  // constructor( private _httpClient: HttpClient ){\n  constructor(_http) {\n    this._http = _http;\n    this.url = GLOBAL.url;\n  }\n  signUp(usuario_a_loguear, gethash = false) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        if (gethash) {\n          usuario_a_loguear.gethash = gethash;\n        }\n        // var email = usuario_a_loguear.email;\n        // var clave = usuario_a_loguear.clave;\n        let json = JSON.stringify(usuario_a_loguear);\n        // Como usamos Js en el servidor tambien, definimos asi el Content-Type\n        let headers = new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer clave_secreta_trabajo_final'\n        });\n        const options = {\n          headers\n        };\n        // Devolvemos la petición AJAX\n        var resp = yield firstValueFrom(_this._http.post(_this.url + 'loguear-usuario', json, {\n          headers: headers\n        }).pipe(catchError(error => {\n          console.log({\n            error: error,\n            message: \"Error luego del pipe\"\n          });\n          throw error;\n        })));\n        // .pipe(\n        //     map( (response: any) =>{\n        //         //console.log({message: \"Funciona?\", resp:response.json()});\n        //         response; //.json();\n        //     }),\n        //     catchError((error: any) => {\n        //         // Lógica de manejo de errores\n        //         console.error('Ocurrió un error al obtener el usuario:', error);\n        //         return throwError(() => new Error('Ocurrió un error al obtener el usuario:' + error))\n        //         })\n        // ); \n        console.log({\n          message: \"Funciona??\",\n          resp: resp\n        });\n        return resp;\n      } catch (error) {\n        console.error('Ocurrió un error en el catch principal:', error);\n        throw error;\n      }\n    })();\n  }\n}\nUsuarioServices.ɵfac = function UsuarioServices_Factory(t) {\n  return new (t || UsuarioServices)(i0.ɵɵinject(i1.HttpClient));\n};\nUsuarioServices.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsuarioServices,\n  factory: UsuarioServices.ɵfac,\n  providedIn: 'root'\n});\nexport { UsuarioServices };","map":{"version":3,"names":["catchError","firstValueFrom","GLOBAL","HttpHeaders","UsuarioServices","constructor","_http","url","signUp","usuario_a_loguear","gethash","_this","_asyncToGenerator","json","JSON","stringify","headers","options","resp","post","pipe","error","console","log","message","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\wamp\\www\\rosario-snack\\cliente\\src\\app\\services\\usuario.services.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Observable, throwError, pipe, firstValueFrom } from 'rxjs';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\n// import 'rxjs/add/operator/map';\r\n// import { Observable } from 'rxjs/Observable';\r\nimport { GLOBAL } from './global';\r\nimport { Usuario } from '../models/usuario';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\n\r\n// Decorador\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\nexport class UsuarioServices{\r\n\r\n    public url: string;\r\n\r\n    // constructor( private _httpClient: HttpClient ){\r\n    constructor( private _http: HttpClient ){\r\n        this.url = GLOBAL.url;\r\n    }\r\n\r\n    async signUp(usuario_a_loguear: Usuario, gethash = false){\r\n        \r\n        try {\r\n            if(gethash){\r\n                usuario_a_loguear.gethash = gethash; \r\n            }\r\n        \r\n            // var email = usuario_a_loguear.email;\r\n            // var clave = usuario_a_loguear.clave;\r\n    \r\n            let json = JSON.stringify(usuario_a_loguear);            \r\n    \r\n            // Como usamos Js en el servidor tambien, definimos asi el Content-Type\r\n            let headers = new HttpHeaders({\r\n                'Content-Type':'application/json',\r\n                'Authorization': 'Bearer clave_secreta_trabajo_final'\r\n            });\r\n    \r\n            const options = { headers };\r\n    \r\n            \r\n            // Devolvemos la petición AJAX\r\n            var resp = await firstValueFrom(this._http.post( this.url + 'loguear-usuario', json, { headers: headers })\r\n                .pipe(catchError(error => { \r\n                    console.log({error:error, message: \"Error luego del pipe\"});\r\n                    throw error;\r\n                })));\r\n                    // .pipe(\r\n                    //     map( (response: any) =>{\r\n\r\n                    //         //console.log({message: \"Funciona?\", resp:response.json()});\r\n                            \r\n                    //         response; //.json();\r\n                    //     }),\r\n                    //     catchError((error: any) => {\r\n                    //         // Lógica de manejo de errores\r\n                    //         console.error('Ocurrió un error al obtener el usuario:', error);\r\n                    //         return throwError(() => new Error('Ocurrió un error al obtener el usuario:' + error))\r\n                    //         })\r\n                    // ); \r\n            \r\n            console.log({message: \"Funciona??\", resp:resp});\r\n\r\n            return resp;\r\n                            \r\n        } catch (error) {\r\n            console.error('Ocurrió un error en el catch principal:', error);\r\n            throw error\r\n        }\r\n        \r\n        \r\n    }\r\n} \r\n\r\n"],"mappings":";AAEA,SAASA,UAAU,QAAa,gBAAgB;AAChD,SAAuCC,cAAc,QAAQ,MAAM;AAGnE;AACA;AACA,SAASC,MAAM,QAAQ,UAAU;AAEjC,SAASC,WAAW,QAAQ,sBAAsB;;;AAGlD;AACA,MAGaC,eAAe;EAIxB;EACAC,YAAqBC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IACtB,IAAI,CAACC,GAAG,GAAGL,MAAM,CAACK,GAAG;EACzB;EAEMC,MAAMA,CAACC,iBAA0B,EAAEC,OAAO,GAAG,KAAK;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAEpD,IAAI;QACA,IAAGF,OAAO,EAAC;UACPD,iBAAiB,CAACC,OAAO,GAAGA,OAAO;;QAGvC;QACA;QAEA,IAAIG,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACN,iBAAiB,CAAC;QAE5C;QACA,IAAIO,OAAO,GAAG,IAAIb,WAAW,CAAC;UAC1B,cAAc,EAAC,kBAAkB;UACjC,eAAe,EAAE;SACpB,CAAC;QAEF,MAAMc,OAAO,GAAG;UAAED;QAAO,CAAE;QAG3B;QACA,IAAIE,IAAI,SAASjB,cAAc,CAACU,KAAI,CAACL,KAAK,CAACa,IAAI,CAAER,KAAI,CAACJ,GAAG,GAAG,iBAAiB,EAAEM,IAAI,EAAE;UAAEG,OAAO,EAAEA;QAAO,CAAE,CAAC,CACrGI,IAAI,CAACpB,UAAU,CAACqB,KAAK,IAAG;UACrBC,OAAO,CAACC,GAAG,CAAC;YAACF,KAAK,EAACA,KAAK;YAAEG,OAAO,EAAE;UAAsB,CAAC,CAAC;UAC3D,MAAMH,KAAK;QACf,CAAC,CAAC,CAAC,CAAC;QACA;QACA;QAEA;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QAERC,OAAO,CAACC,GAAG,CAAC;UAACC,OAAO,EAAE,YAAY;UAAEN,IAAI,EAACA;QAAI,CAAC,CAAC;QAE/C,OAAOA,IAAI;OAEd,CAAC,OAAOG,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;QAC/D,MAAMA,KAAK;;IACd;EAGL;;AA5DSjB,eAAe,C;mBAAfA,eAAe,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAfxB,eAAe,C;SAAfA,eAAe;EAAAyB,OAAA,EAAfzB,eAAe,CAAA0B,IAAA;EAAAC,UAAA,EAFZ;AAAM;SAET3B,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}