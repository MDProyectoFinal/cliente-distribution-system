{"ast":null,"code":"import _asyncToGenerator from \"C:/wamp/www/rosario-snack/cliente/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { catchError, map } from 'rxjs/operators';\nimport { firstValueFrom } from 'rxjs';\nimport { GLOBAL } from './global';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Decorador\nlet UsuarioServices = /*#__PURE__*/(() => {\n  class UsuarioServices {\n    // constructor( private _httpClient: HttpClient ){\n    constructor(_http) {\n      this._http = _http;\n      this.url = GLOBAL.url;\n    }\n    // *** LOGUEAR USUARIO ***\n    signUp(usuario_a_loguear, gethash = false) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          if (gethash) {\n            usuario_a_loguear.gethash = gethash;\n          }\n          let jsonUser = JSON.stringify(usuario_a_loguear);\n          // Como usamos Js en el servidor tambien, definimos asi el Content-Type\n          let headers = new HttpHeaders({\n            'Content-Type': 'application/json',\n            //'authorization': this.token,\n            'Authorization': 'Bearer clave_secreta_trabajo_final'\n          });\n          // Devolvemos la petición AJAX\n          var resp = yield firstValueFrom(_this._http.post(_this.url + 'loguear-usuario', jsonUser, {\n            headers: headers\n          }).pipe(map(response => {\n            return response;\n          }),\n          // Error arrojado desde el usuario.js. Clave incorrecta, usuario incorrecto, etc..\n          catchError(error => {\n            // Puedo definir si solo mando eso, o el status y mas info o solo el \"error\"\n            throw error.error.message;\n          })));\n          return resp;\n        } catch (error) {\n          throw error;\n        }\n      })();\n    }\n    // async registroUsuario(usuario_a_registrar: UsuarioPersona){\n    //     var usuarioP = new Usuario('','','','','','ROLE_USER','', new Date, new Date, false); \n    //     let jsonUsuarioRegistro = JSON.stringify(usuarioP); \n    //     let params = jsonUsuarioRegistro;\n    //     // Como usamos Js en el servidor tambien, definimos asi el Content-Type\n    //     // let headers = new HttpHeaders({\n    //     //     'Content-Type':'application/json',\n    //     //     'autorizacion':'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI2NDk2MGVkNWE4ZDA3OGY0NWY3YjAyNDAiLCJub21icmVfdXN1YXJpbyI6Ik1hbnVVc2VyIiwiZW1haWwiOiJtYW51cGVyZXpAZ21haWwuY29tIiwicm9sIjoiQ2xpZW50ZSIsImltYWdlbiI6Im51bGwiLCJpYXQiOjE2OTE1MzE2MDEsImV4cCI6MTY5NDEyMzYwMX0.i0fL37ACEC2I_oWrwPDGfXrHGK2eDCfnarXK17hAgmA',\n    //     //     'Authorization': 'Bearer clave_secreta_trabajo_final'\n    //     // });\n    //     const headers = new HttpHeaders({\n    //         'Content-Type': 'application/json' // 'application/x-www-form-urlencoded'\n    //     });\n    //     try {\n    //         // Devolvemos la petición AJAX\n    //         const resp = await this._http.post( this.url + 'guardar-persona', params, {headers: headers} )\n    //         .pipe(                \n    //             map(response => {\n    //                 debugger;\n    //                 console.log( {resp: response, message: \"Respuesta dentro del pipe.map...\"} );\n    //                 //return response;\n    //             }),\n    //             // Error arrojado desde el usuario.js. Clave incorrecta, usuario incorrecto, etc..\n    //             catchError(error => { \n    //                 debugger;\n    //                 console.log({error:error.error.message, message: \"No se encontró el usuario logueado\"});\n    //                 // Puedo definir si solo mando eso, o el status y mas info o solo el \"error\"\n    //                 throw error.error.message;\n    //             }));     \n    //         // var resp = await this._http.get( this.url + 'probando-controlador', { headers: headers })  \n    //         //     .pipe(\n    //         //         map(response => {\n    //         //             debugger;\n    //         //             console.log( {resp: response, message: \"Respuesta dentro del pipe.map...\"} );\n    //         //             return response;\n    //         //         }),\n    //         //         // Error arrojado desde el usuario.js. Clave incorrecta, usuario incorrecto, etc..\n    //         //         catchError(error => { \n    //         //             debugger;\n    //         //             console.log({error:error.error.message, message: \"No se encontró el usuario logueado\"});\n    //         //             // Puedo definir si solo mando eso, o el status y mas info o solo el \"error\"\n    //         //             throw error.error.message;\n    //         //         }));  \n    //         console.log({ message: \"No tira error?\", respuesta: resp });\n    //         return resp;\n    //     } catch (error) {\n    //         console.log({error:error, message: \"CATCH -No se encontró el usuario logueado\"});\n    //         // Puedo definir si solo mando eso, o el status y mas info o solo el \"error\"\n    //         throw error;\n    //     }\n    // }\n    actualizarUsuario(usuario_a_actualizar) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        let jsonUser = JSON.stringify(usuario_a_actualizar);\n        // Como usamos Js en el servidor tambien, definimos asi el Content-Type\n        let headers = new HttpHeaders({\n          'Content-Type': 'application/json',\n          //'autorizacion': this.getToken(),\n          'authorization': _this2.token\n          // 'Authorization': 'Bearer clave_secreta_trabajo_final'\n        });\n\n        try {\n          // Devolvemos la petición AJAX\n          var resp = yield firstValueFrom(_this2._http.put(_this2.url + 'actualizar-usuario/' + usuario_a_actualizar._id, jsonUser, {\n            headers: headers\n          }));\n          if (resp) {\n            console.log(resp);\n            // Deberiamos formar un objeto con el UsuarioPersona para luego cambiar la variable\n            return resp;\n          } else {\n            console.log('Ocurrio un error al actualizar el usuario');\n            return null;\n          }\n        } catch (error) {\n          throw error.error.message;\n        }\n      })();\n    }\n    getIdentity() {\n      let identity = localStorage.getItem('identity');\n      // const identityString = identity ? JSON.stringify(identity) : '';\n      // if(identityString != 'undefined' && identityString != ''){\n      //     this.identity = identityString;\n      // }else{\n      //     this.identity = null;\n      // }\n      return localStorage.getItem('identity');\n      //return this.identity;\n    }\n\n    getToken() {\n      let token = localStorage.getItem('token');\n      const tokenString = token ? JSON.stringify(token) : '';\n      if (tokenString != 'undefined' && tokenString != '') {\n        this.token = tokenString;\n      } else {\n        this.token = null;\n      }\n      return this.token;\n    }\n  }\n  UsuarioServices.ɵfac = function UsuarioServices_Factory(t) {\n    return new (t || UsuarioServices)(i0.ɵɵinject(i1.HttpClient));\n  };\n  UsuarioServices.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsuarioServices,\n    factory: UsuarioServices.ɵfac,\n    providedIn: 'root'\n  });\n  return UsuarioServices;\n})();\nexport { UsuarioServices };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}